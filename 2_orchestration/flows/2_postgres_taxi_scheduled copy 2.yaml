id: postgres_taxi_scheduled
namespace: zoomcamp

inputs:
  - id: taxi
    type: SELECT
    displayName: 'select taxi type'
    values: ['yellow', 'green']
    defaults: 'green'

variables:
  file: "{{inputs.taxi}}_tripdata_{{trigger.date | date('yyyy-MM')}}.csv"
  table: "public.{{inputs.taxi}}_tripdata"
  stagging_table: "public.{{inputs.taxi}}_tripdata_stagging"
  data: "{{outputs.extract.outputFiles[inputs.taxi ~ '_tripdata_' ~ (trigger.date | date('yyyy-MM')) ~ '.csv']}}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"
      taxi: "{{inputs.taxi}}"

  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi}}/{{render(vars.file)}}.gz | gunzip > {{render(vars.file)}}

  - id: if_yellow
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.taxi == 'yellow'}}"
    then:
      - id: yellow_create_table
        type: io.kestra.plugin.jdbc.postgresql.Query
        sql:
          CREATE TABLE IF NOT EXISTS {{render(vars.table)}} (
            unique_row_id           text,
            filename                text,
            VendorID                text,
            tpep_pickup_datetime    timestamp,
            tpep_dropoff_datetime   timestamp,
            passenger_count         integer,
            trip_distance           double precision,
            RatecodeID              text,
            store_and_fwd_flag      text,
            PULocationID            text,
            DOLocationID            text,
            payment_type            integer,
            fare_amount             double precision,
            extra                   double precision,
            mta_tax                 double precision,
            tip_amount              double precision,
            total_amount            double precision,
            improvement_surcharge   double precision,
            tolls_amount            double precision,
            congestion_surcharge    double precision
          );

      - id: yellow_create_staging_table
        type: io.kestra.plugin.jdbc.postgresql.Query
        sql:
          CREATE TABLE IF NOT EXISTS {{render(vars.stagging_table)}} (
            unique_row_id           text,
            filename                text,
            VendorID                text,
            tpep_pickup_datetime    timestamp,
            tpep_dropoff_datetime   timestamp,
            passenger_count         integer,
            trip_distance           double precision,
            RatecodeID              text,
            store_and_fwd_flag      text,
            PULocationID            text,
            DOLocationID            text,
            payment_type            integer,
            fare_amount             double precision,
            extra                   double precision,
            mta_tax                 double precision,
            tip_amount              double precision,
            total_amount            double precision,
            improvement_surcharge   double precision,
            tolls_amount            double precision,
            congestion_surcharge    double precision
          );

      - id: yellow_truncate_stagging_table
        type: io.kestra.plugin.jdbc.postgresql.Query
        sql:
          TRUNCATE TABLE {{render(vars.stagging_table)}};


      - id: yellow_copy_into_staging_table
        type: io.kestra.plugin.jdbc.postgresql.CopyIn
        format: CSV
        from: "{{render(vars.data)}}"
        table: "{{render(vars.stagging_table)}}"
        header: true
        columns: [VendorID, tpep_pickup_datetime, tpep_dropoff_datetime, passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID, DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount, improvement_surcharge, total_amount, congestion_surcharge]

      - id: yellow_add_unique_id_and_filename
        type: io.kestra.plugin.jdbc.postgresql.Query
        sql:
          UPDATE {{render(vars.stagging_table)}}
          SET
            unique_row_id = md5(
              VendorID ||
              COALESCE(CAST(tpep_pickup_datetime AS text), '') ||
              COALESCE(CAST(tpep_dropoff_datetime AS text), '') ||
              COALESCE(PULocationID, '') ||
              COALESCE(DOLocationID, '') ||
              COALESCE(CAST(trip_distance AS text), '') ||
              COALESCE(CAST(fare_amount AS text), '')
            ),
            filename = '{{render(vars.file)}}';

      - id: yellow_merge_data
        type: io.kestra.plugin.jdbc.postgresql.Query
        sql:
          MERGE INTO {{render(vars.table)}} AS T
          USING {{render(vars.stagging_table)}} AS S
          ON T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN
            INSERT (
              unique_row_id, filename, VendorID, tpep_pickup_datetime, tpep_dropoff_datetime, passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID, DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount, improvement_surcharge, total_amount, congestion_surcharge
            )
            VALUES (
              S.unique_row_id, S.filename, S.VendorID, S.tpep_pickup_datetime, S.tpep_dropoff_datetime, S.passenger_count, S.trip_distance, S.RatecodeID, S.store_and_fwd_flag, S.PULocationID, S.DOLocationID, S.payment_type, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount, S.improvement_surcharge, S.total_amount, S.congestion_surcharge
            );

  - id: if_green
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.taxi == 'green'}}"
    then:
      - id: green_create_table
        type: io.kestra.plugin.jdbc.postgresql.Query
        sql:
          CREATE TABLE IF NOT EXISTS {{render(vars.table)}} (
            unique_row_id           text,
            filename                text,
            VendorID                text,
            lpep_pickup_datetime    timestamp,
            lpep_dropoff_datetime   timestamp,
            store_and_fwd_flag      text,
            RatecodeID              text,
            PULocationID            text,
            DOLocationID            text,
            passenger_count         integer,
            trip_distance           double precision,
            fare_amount             double precision,
            extra                   double precision,
            mta_tax                 double precision,
            tip_amount              double precision,
            tolls_amount            double precision,
            ehail_fee               double precision,
            improvement_surcharge   double precision,
            total_amount            double precision,
            payment_type            integer,
            trip_type               integer,
            congestion_surcharge    double precision
          );

      - id: green_create_staging_table
        type: io.kestra.plugin.jdbc.postgresql.Query
        sql:
          CREATE TABLE IF NOT EXISTS {{render(vars.stagging_table)}} (
            unique_row_id           text,
            filename                text,
            VendorID                text,
            lpep_pickup_datetime    timestamp,
            lpep_dropoff_datetime   timestamp,
            store_and_fwd_flag      text,
            RatecodeID              text,
            PULocationID            text,
            DOLocationID            text,
            passenger_count         integer,
            trip_distance           double precision,
            fare_amount             double precision,
            extra                   double precision,
            mta_tax                 double precision,
            tip_amount              double precision,
            tolls_amount            double precision,
            ehail_fee               double precision,
            improvement_surcharge   double precision,
            total_amount            double precision,
            payment_type            integer,
            trip_type               integer,
            congestion_surcharge    double precision
          );

      - id: green_truncate_stagging_table
        type: io.kestra.plugin.jdbc.postgresql.Query
        sql:
          TRUNCATE TABLE {{render(vars.stagging_table)}};


      - id: green_copy_into_staging_table
        type: io.kestra.plugin.jdbc.postgresql.CopyIn
        format: CSV
        from: "{{render(vars.data)}}"
        table: "{{render(vars.stagging_table)}}"
        header: true
        columns: [VendorID, lpep_pickup_datetime, lpep_dropoff_datetime, store_and_fwd_flag, RatecodeID, PULocationID, DOLocationID, passenger_count, trip_distance, fare_amount, extra, mta_tax, tip_amount, tolls_amount, ehail_fee, improvement_surcharge, total_amount, payment_type, trip_type, congestion_surcharge]

      - id: green_add_unique_id_and_filename
        type: io.kestra.plugin.jdbc.postgresql.Query
        sql:
          UPDATE {{render(vars.stagging_table)}}
          SET
            unique_row_id = md5(
              VendorID ||
              COALESCE(CAST(lpep_pickup_datetime AS text), '') ||
              COALESCE(CAST(lpep_dropoff_datetime AS text), '') ||
              COALESCE(PULocationID, '') ||
              COALESCE(DOLocationID, '') ||
              COALESCE(CAST(trip_distance AS text), '') ||
              COALESCE(CAST(fare_amount AS text), '')
            ),
            filename = '{{render(vars.file)}}';

      - id: green_merge_data
        type: io.kestra.plugin.jdbc.postgresql.Query
        sql:
          MERGE INTO {{render(vars.table)}} AS T
          USING {{render(vars.stagging_table)}} AS S
          ON T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN
            INSERT (
              unique_row_id, filename, VendorID, lpep_pickup_datetime, lpep_dropoff_datetime, store_and_fwd_flag, RatecodeID, PULocationID, DOLocationID, passenger_count, trip_distance, fare_amount, extra, mta_tax, tip_amount, tolls_amount, ehail_fee, improvement_surcharge, total_amount, payment_type, trip_type, congestion_surcharge
            )
            VALUES (
              S.unique_row_id, S.filename, S.VendorID, S.lpep_pickup_datetime, S.lpep_dropoff_datetime, S.store_and_fwd_flag, S.RatecodeID, S.PULocationID, S.DOLocationID, S.passenger_count, S.trip_distance, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount, S.ehail_fee, S.improvement_surcharge, S.total_amount, S.payment_type, S.trip_type, S.congestion_surcharge
            );

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles

pluginDefaults:
  - type: io.kestra.plugin.jdbc.postgresql
    values:
      url: jdbc:postgresql://postgres:5432/de-zoomcamp
      username: postgres
      password: postgres

triggers:
  - id: green_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 9 1 * *"
    inputs:
      taxi: green

  - id: yellow_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 10 1 * *"
    inputs:
      taxi: yellow
