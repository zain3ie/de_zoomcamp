id: gcp_taxi
namespace: zoomcamp

inputs:
  - id: taxi
    type: SELECT
    displayName: 'select taxi type'
    values: ['yellow', 'green']
    defaults: 'green'

  - id: year
    type: SELECT
    displayName: 'select year'
    values: ['2019', '2020']
    defaults: '2020'

  - id: month
    type: SELECT
    displayName: 'select month'
    values: ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']
    defaults: '04'

variables:
  file: "{{inputs.taxi}}_tripdata_{{inputs.year}}-{{inputs.month}}.csv"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/{{vars.file}}"
  table: "{{kv('GCP_DATASET')}}.{{inputs.taxi}}_tripdata_{{inputs.year}}_{{inputs.month}}"
  data: "{{outputs.extract.outputFiles[inputs.taxi ~ '_tripdata_' ~ inputs.year ~ '-' ~ inputs.month ~ '.csv']}}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"
      taxi: "{{inputs.taxi}}"

  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi}}/{{render(vars.file)}}.gz | gunzip > {{render(vars.file)}}

  - id: upload_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{render(vars.data)}}"
    to: "{{render(vars.gcs_file)}}"

  - id: if_yellow_taxi
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.taxi == 'yellow'}}"
    then:
    - id: bq_yellow_tripdata
      type: io.kestra.plugin.gcp.bigquery.Query
      sql:
        CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.yellow_tripdata`
        (
          unique_row_id         BYTES,
          filename              STRING,
          VendorID              STRING,
          tpep_pickup_datetime  TIMESTAMP,
          tpep_dropoff_datetime TIMESTAMP,
          passenger_count       INTEGER,
          trip_distance         NUMERIC,
          RatecodeID            STRING,
          store_and_fwd_flag    STRING,
          PULocationID          STRING,
          DOLocationID          STRING,
          payment_type          INTEGER,
          fare_amount           NUMERIC,
          extra                 NUMERIC,
          mta_tax               NUMERIC,
          tip_amount            NUMERIC,
          tolls_amount          NUMERIC,
          improvement_surcharge NUMERIC,
          total_amount          NUMERIC,
          congestion_surcharge  NUMERIC
        )
        PARTITION BY DATE(tpep_pickup_datetime);

    - id: bq_yellow_table_ext
      type: io.kestra.plugin.gcp.bigquery.Query
      sql:
        CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`
        (
          VendorID              STRING,
          tpep_pickup_datetime  TIMESTAMP,
          tpep_dropoff_datetime TIMESTAMP,
          passenger_count       INTEGER,
          trip_distance         NUMERIC,
          RatecodeID            STRING,
          store_and_fwd_flag    STRING,
          PULocationID          STRING,
          DOLocationID          STRING,
          payment_type          INTEGER,
          fare_amount           NUMERIC,
          extra                 NUMERIC,
          mta_tax               NUMERIC,
          tip_amount            NUMERIC,
          tolls_amount          NUMERIC,
          improvement_surcharge NUMERIC,
          total_amount          NUMERIC,
          congestion_surcharge  NUMERIC
        )
        OPTIONS (
          format = 'CSV',
          uris = ['{{render(vars.gcs_file)}}'],
          skip_leading_rows = 1,
          ignore_unknown_values = TRUE
        );

    - id: bq_yellow_table_tmp
      type: io.kestra.plugin.gcp.bigquery.Query
      sql:
        CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}`
        AS
        SELECT
          MD5(CONCAT(
            COALESCE(CAST(VendorID AS STRING), ""),
            COALESCE(CAST(tpep_pickup_datetime AS STRING), ""),
            COALESCE(CAST(tpep_dropoff_datetime AS STRING), ""),
            COALESCE(CAST(PULocationID AS STRING), ""),
            COALESCE(CAST(DOLocationID AS STRING), "")
          )) AS unique_row_id,
          "{{render(vars.file)}}" AS filename,
          *
        FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`;

    - id: bq_yellow_merge
      type: io.kestra.plugin.gcp.bigquery.Query
      sql:
        MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.yellow_tripdata` T
        USING `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}` S
        ON T.unique_row_id = S.unique_row_id
        WHEN NOT MATCHED THEN
          INSERT (
            unique_row_id, filename, VendorID, tpep_pickup_datetime, tpep_dropoff_datetime, passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID, DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount, improvement_surcharge, total_amount, congestion_surcharge
          )
          VALUES (
            S.unique_row_id, S.filename, S.VendorID, S.tpep_pickup_datetime, S.tpep_dropoff_datetime, S.passenger_count, S.trip_distance, S.RatecodeID, S.store_and_fwd_flag, S.PULocationID, S.DOLocationID, S.payment_type, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount, S.improvement_surcharge, S.total_amount, S.congestion_surcharge
          );

  - id: if_green_taxi
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.taxi == 'green'}}"
    then:
    - id: bq_green_tripdata
      type: io.kestra.plugin.gcp.bigquery.Query
      sql:
        CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.green_tripdata`
        (
          unique_row_id         BYTES,
          filename              STRING,
          VendorID              STRING,
          lpep_pickup_datetime  TIMESTAMP,
          lpep_dropoff_datetime TIMESTAMP,
          store_and_fwd_flag    STRING,
          RatecodeID            STRING,
          PULocationID          STRING,
          DOLocationID          STRING,
          passenger_count       INT64,
          trip_distance         NUMERIC,
          fare_amount           NUMERIC,
          extra                 NUMERIC,
          mta_tax               NUMERIC,
          tip_amount            NUMERIC,
          tolls_amount          NUMERIC,
          ehail_fee             NUMERIC,
          improvement_surcharge NUMERIC,
          total_amount          NUMERIC,
          payment_type          INTEGER,
          trip_type             STRING,
          congestion_surcharge  NUMERIC
        )
        PARTITION BY DATE(lpep_pickup_datetime);

    - id: bq_green_table_ext
      type: io.kestra.plugin.gcp.bigquery.Query
      sql:
        CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`
        (
          VendorID              STRING,
          lpep_pickup_datetime  TIMESTAMP,
          lpep_dropoff_datetime TIMESTAMP,
          store_and_fwd_flag    STRING,
          RatecodeID            STRING,
          PULocationID          STRING,
          DOLocationID          STRING,
          passenger_count       INT64,
          trip_distance         NUMERIC,
          fare_amount           NUMERIC,
          extra                 NUMERIC,
          mta_tax               NUMERIC,
          tip_amount            NUMERIC,
          tolls_amount          NUMERIC,
          ehail_fee             NUMERIC,
          improvement_surcharge NUMERIC,
          total_amount          NUMERIC,
          payment_type          INTEGER,
          trip_type             STRING,
          congestion_surcharge  NUMERIC
        )
        OPTIONS (
          format = 'CSV',
          uris = ['{{render(vars.gcs_file)}}'],
          skip_leading_rows = 1,
          ignore_unknown_values = TRUE
        );

    - id: bq_green_table_tmp
      type: io.kestra.plugin.gcp.bigquery.Query
      sql:
        CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}`
        AS
        SELECT
          MD5(CONCAT(
            COALESCE(CAST(VendorID AS STRING), ""),
            COALESCE(CAST(lpep_pickup_datetime AS STRING), ""),
            COALESCE(CAST(lpep_dropoff_datetime AS STRING), ""),
            COALESCE(CAST(PULocationID AS STRING), ""),
            COALESCE(CAST(DOLocationID AS STRING), "")
          )) AS unique_row_id,
          "{{render(vars.file)}}" AS filename,
          *
        FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`;

    - id: bq_green_merge
      type: io.kestra.plugin.gcp.bigquery.Query
      sql:
        MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.green_tripdata` T
        USING `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}` S
        ON T.unique_row_id = S.unique_row_id
        WHEN NOT MATCHED THEN
          INSERT (
            unique_row_id, filename, VendorID, lpep_pickup_datetime, lpep_dropoff_datetime, store_and_fwd_flag, RatecodeID, PULocationID, DOLocationID, passenger_count, trip_distance, fare_amount, extra, mta_tax, tip_amount, tolls_amount, ehail_fee, improvement_surcharge, total_amount, payment_type, trip_type, congestion_surcharge
          )
          VALUES (
            S.unique_row_id, S.filename, S.VendorID, S.lpep_pickup_datetime, S.lpep_dropoff_datetime, S.store_and_fwd_flag, S.RatecodeID, S.PULocationID, S.DOLocationID, S.passenger_count, S.trip_distance, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount, S.ehail_fee, S.improvement_surcharge, S.total_amount, S.payment_type, S.trip_type, S.congestion_surcharge
          );

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
